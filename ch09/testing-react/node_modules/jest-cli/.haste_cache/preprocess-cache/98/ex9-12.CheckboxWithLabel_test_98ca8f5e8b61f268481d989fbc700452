// 예제 9-12. 동일한 테스트를 다른 방식으로 실행
'use strict'; // istanbul ignore next
function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}var _react = require(

'react');var _react2 = _interopRequireDefault(_react);var _reactDom = require(
'react-dom');var _reactDom2 = _interopRequireDefault(_reactDom);var _reactAddonsTestUtils = require(
'react-addons-test-utils');var _reactAddonsTestUtils2 = _interopRequireDefault(_reactAddonsTestUtils);var _reactShallowTestutils = require(
'react-shallow-testutils');var _reactShallowTestutils2 = _interopRequireDefault(_reactShallowTestutils);jest.autoMockOff();

var shallowRenderer = _reactAddonsTestUtils2['default'].createRenderer();
var CheckboxWithLabel = require('../CheckboxWithLabel');

describe('CheckboxWithLabel', function () {

  // 라벨을 포함하는 체크박스 하나를 문서에 렌더링한다.
  shallowRenderer.render(_react2['default'].createElement(CheckboxWithLabel, { labelOn: 'On', labelOff: 'Off' }));

  var checkbox = shallowRenderer.getRenderOutput();
  var component = _reactShallowTestutils2['default'].getMountedInstance(shallowRenderer);

  it('defaults to unchecked and Off label', function () {
    var expectedChildren = [
    _react2['default'].createElement('input', { type: 'checkbox', checked: false, onChange: component.onChange }), 
    "Off"];

    expect(checkbox.props.children).toEqual(expectedChildren);});});